# Makefile.in generated by automake 1.10.2 from Makefile.am.
# blackjack/src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/gnome-games
pkglibdir = $(libdir)/gnome-games
pkgincludedir = $(includedir)/gnome-games
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
bin_PROGRAMS = blackjack$(EXEEXT)
# FIXMEchpe: what's this -lz about??
am__append_1 = $(GNOME_CFLAGS)
am__append_2 = $(GNOME_LIBS)
am__append_3 = $(RSVG_CFLAGS)
am__append_4 = $(RSVG_LIBS)
am__append_5 = $(GHTREAD_CFLAGS)
am__append_6 = $(GTHREAD_LIBS)
subdir = blackjack/src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/c99.m4 $(top_srcdir)/m4/ggz.m4 \
	$(top_srcdir)/m4/gnome-doc-utils.m4 \
	$(top_srcdir)/m4/intltool.m4 $(top_srcdir)/m4/libtool.m4 \
	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
	$(top_srcdir)/m4/platform.m4 $(top_srcdir)/m4/sdl.m4 \
	$(top_srcdir)/m4/shave.m4 $(top_srcdir)/m4/sound.m4 \
	$(top_srcdir)/m4/system.m4 $(top_srcdir)/m4/tls.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am__objects_1 =
am_blackjack_OBJECTS = blackjack-blackjack.$(OBJEXT) \
	blackjack-card.$(OBJEXT) blackjack-chips.$(OBJEXT) \
	blackjack-dialog.$(OBJEXT) blackjack-draw.$(OBJEXT) \
	blackjack-events.$(OBJEXT) blackjack-game.$(OBJEXT) \
	blackjack-hand.$(OBJEXT) blackjack-menu.$(OBJEXT) \
	blackjack-player.$(OBJEXT) blackjack-press_data.$(OBJEXT) \
	blackjack-slot.$(OBJEXT) blackjack-splash.$(OBJEXT) \
	blackjack-strategy.$(OBJEXT) $(am__objects_1)
blackjack_OBJECTS = $(am_blackjack_OBJECTS)
am__DEPENDENCIES_1 =
am__DEPENDENCIES_2 = $(am__DEPENDENCIES_1)
am__DEPENDENCIES_3 = $(am__DEPENDENCIES_1)
am__DEPENDENCIES_4 = $(am__DEPENDENCIES_1)
blackjack_DEPENDENCIES =  \
	$(top_builddir)/libgames-support/libgames-support.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_3) \
	$(am__DEPENDENCIES_4)
blackjack_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(blackjack_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(blackjack_SOURCES)
DIST_SOURCES = $(blackjack_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/guillaume/Builds/gnome-games/missing --run aclocal-1.10
ACLOCAL_AMFLAGS = ${ACLOCAL_FLAGS}
ALL_LINGUAS = 
AMTAR = ${SHELL} /home/guillaume/Builds/gnome-games/missing --run tar
AM_CFLAGS =  -Wall -Wmissing-prototypes -Wnested-externs -Wpointer-arith -Wno-sign-compare 
AM_CPPFLAGS = 
AM_CXXFLAGS =  -g -O2 -fsigned-char -Wall -Wno-unused -Wshadow -Woverloaded-virtual 
AM_LDFLAGS = 
AM_MAKEFLAGS = `test -z $V && echo -s`
AR = ar
AS = as
AUTOCONF = ${SHELL} /home/guillaume/Builds/gnome-games/missing --run autoconf
AUTOHEADER = ${SHELL} /home/guillaume/Builds/gnome-games/missing --run autoheader
AUTOMAKE = ${SHELL} /home/guillaume/Builds/gnome-games/missing --run automake-1.10
AWK = gawk
CANBERRA_GTK_CFLAGS = -D_REENTRANT -I/usr/include/gtk-2.0 -I/usr/lib/gtk-2.0/include -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng12  
CANBERRA_GTK_LIBS = -lcanberra-gtk -lcanberra -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgio-2.0 -lpangoft2-1.0 -lgdk_pixbuf-2.0 -lpangocairo-1.0 -lcairo -lpango-1.0 -lfreetype -lfontconfig -lgobject-2.0 -lgmodule-2.0 -lglib-2.0  
CATALOGS = 
CATOBJEXT = .gmo
CC = /bin/sh /home/guillaume/Builds/gnome-games//shave cc gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2 -fsigned-char -fsigned-char -D_REENTRANT
CHECK_CFLAGS =  
CHECK_LIBS = -lcheck  
CLUTTER_CFLAGS = -pthread -I/usr/include/clutter-0.9 -I/usr/include/cairo -I/usr/include/pango-1.0 -I/usr/include/gtk-2.0 -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng12 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/drm  
CLUTTER_GTK_CFLAGS = -pthread -I/usr/include/clutter-0.9/clutter-gtk -I/usr/include/clutter-0.9 -I/usr/include/gtk-2.0 -I/usr/include/cairo -I/usr/include/pango-1.0 -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng12 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/drm -I/usr/lib/gtk-2.0/include -I/usr/include/atk-1.0  
CLUTTER_GTK_LIBS = -pthread -lclutter-gtk-0.9 -lclutter-glx-0.9 -lgtk-x11-2.0 -lgthread-2.0 -lrt -lXi -lGL -lX11 -lXdamage -lXcomposite -lXfixes -lgdk-x11-2.0 -latk-1.0 -lgio-2.0 -lpangoft2-1.0 -lgdk_pixbuf-2.0 -lpangocairo-1.0 -lcairo -lpango-1.0 -lfreetype -lfontconfig -lgobject-2.0 -lgmodule-2.0 -lglib-2.0  
CLUTTER_LIBS = -pthread -lclutter-glx-0.9 -lpangocairo-1.0 -lgthread-2.0 -lrt -lXi -lGL -lX11 -lXdamage -lXcomposite -lgdk_pixbuf-2.0 -lpango-1.0 -lcairo -lXfixes -lgobject-2.0 -lgmodule-2.0 -lglib-2.0  
CPP = gcc -E
CPPFLAGS =  -I /usr/include -I /usr/local/include
CXX = /bin/sh /home/guillaume/Builds/gnome-games//shave cxx g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2 -fsigned-char -fsigned-char
CYGPATH_W = echo
DATADIRNAME = share
DBUS_GLIB_CFLAGS = 
DBUS_GLIB_LIBS = 
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DISABLE_DEPRECATED = -DG_DISABLE_DEPRECATED -DGDK_DISABLE_DEPRECATED -DGDK_PIXBUF_DISABLE_DEPRECATED -DPANGO_DISABLE_DEPRECATED -DGTK_DISABLE_DEPRECATED -DGCONF_DISABLE_DEPRECATED -DBONOBO_DISABLE_DEPRECATED -DBONOBO_UI_DISABLE_DEPRECATED -DGNOME_VFS_DISABLE_DEPRECATED -DGNOME_DISABLE_DEPRECATED -DLIBGLADE_DISABLE_DEPRECATED -DWNCK_DISABLE_DEPRECATED -DLIBSOUP_DISABLE_DEPRECATED
DISTCHECK_CONFIGURE_FLAGS = --disable-scrollkeeper 
DLLTOOL = dlltool
DOC_USER_FORMATS = 
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
F77 = /bin/sh /home/guillaume/Builds/gnome-games//shave f77 
FC = /bin/sh /home/guillaume/Builds/gnome-games//shave fc 
FGREP = /bin/grep -F
GCONFTOOL = /usr/bin/gconftool-2
GCONF_SCHEMA_CONFIG_SOURCE = xml:merged:/etc/gconf/gconf.xml.defaults
GCONF_SCHEMA_FILE_DIR = $(sysconfdir)/gconf/schemas
GETTEXT_PACKAGE = gnome-games
GGZDMOD_INCLUDES = 
GGZDMOD_LDFLAGS = 
GGZMOD_INCLUDES = -I /usr/include
GGZMOD_LDFLAGS = -L/usr/lib
GGZTLS_INCLUDES = 
GGZTLS_LDFLAGS = 
GGZ_CONFIG = /usr/bin/ggz-config
GGZ_GTK_INCLUDES = -I$(top_srcdir)/dependencies/ggz-gtk
GGZ_GTK_LDFLAGS = 
GLIB_GENMARSHAL = /usr/bin/glib-genmarshal
GLIB_GENMARSHAL_INTERNAL = --internal
GMOFILES = 
GMSGFMT = /usr/bin/msgfmt
GNOME_CFLAGS = -DORBIT2=1 -pthread -I/usr/include/gconf/2 -I/usr/include/orbit-2.0 -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include  
GNOME_GAMES_GGZ_DSC_RULE = %.dsc:   %.dsc.in   ; $(SED) -e "s|@VERSION@|$(VERSION)|g" -e "s|@libexecdir@|$(libexecdir)|g" -e "s|@bindir@|$(bindir)|g" -e "s|@ggzexecmoddir@|$(ggzexecmoddir)|g"< $< > $@
GNOME_GAMES_GGZ_INTLTOOL_ROOM_RULE = %.room:   %.room.in   $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; LC_ALL=C $(INTLTOOL_MERGE) -d -u -c $(top_builddir)/po/.intltool-merge-cache $(top_srcdir)/po $< $@
GNOME_LIBS = -lgconf-2 -lglib-2.0  
GREP = /bin/grep
GTHREAD_CFLAGS = -pthread -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include  
GTHREAD_LIBS = -pthread -lgthread-2.0 -lrt -lglib-2.0  
GTK_CFLAGS = -I/usr/include/gtk-2.0 -I/usr/lib/gtk-2.0/include -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng12  
GTK_LIBS = -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgio-2.0 -lpangoft2-1.0 -lgdk_pixbuf-2.0 -lpangocairo-1.0 -lcairo -lpango-1.0 -lfreetype -lfontconfig -lgobject-2.0 -lgmodule-2.0 -lglib-2.0  
GUILE = 
GUILE_CFLAGS = 
GUILE_CONFIG = 
GUILE_LIBS = 
HELP_DIR = ${datadir}/gnome/help
HILDON_CFLAGS = 
HILDON_LIBS = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
INSTOBJEXT = .mo
INTLLIBS = 
INTLTOOL_EXTRACT = /usr/bin/intltool-extract
INTLTOOL_MERGE = /usr/bin/intltool-merge
INTLTOOL_PERL = /usr/bin/perl
INTLTOOL_UPDATE = /usr/bin/intltool-update
LD = /usr/bin/ld
LDADD =  -lnsl -lpthread
LDFLAGS =  -L/usr/lib -L/usr/local/lib
LIBGGZ_INCLUDES = -I /usr/include
LIBGGZ_LDFLAGS = -L/usr/lib
LIBOBJS = 
LIBS = 
LIBTOOL = /bin/sh /home/guillaume/Builds/gnome-games//shave-libtool '$(SHELL) $(top_builddir)/libtool'
LIB_ASYNC = 
LIB_GCRYPT = -lgcrypt
LIB_GGZ = -lggz
LIB_GGZDMOD = 
LIB_GGZMOD = -lggzmod
LIB_GGZTLS = 
LIB_GGZ_GTK = $(top_builddir)/dependencies/ggz-gtk/libggz-gtk.la
LIPO = 
LN_S = ln -s
LSB_RELEASE = /usr/bin/lsb_release
LTLIBOBJS = 
MAINT = 
MAKEFLAGS = -s
MAKEINFO = ${SHELL} /home/guillaume/Builds/gnome-games/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
MKINSTALLDIRS = ./mkinstalldirs
MSGFMT = /usr/bin/msgfmt
MSGFMT_OPTS = -c
MSGMERGE = /usr/bin/msgmerge
NM = /usr/bin/nm -B
NMEDIT = 
OBJC = /bin/sh /home/guillaume/Builds/gnome-games//shave objc 
OBJDUMP = objdump
OBJEXT = o
OMF_DIR = ${datadir}/omf
OTOOL = 
OTOOL64 = 
PACKAGE = gnome-games
PACKAGE_BUGREPORT = http://bugzilla.gnome.org/enter_bug.cgi?product=gnome-games
PACKAGE_NAME = GNOME Games
PACKAGE_STRING = GNOME Games 2.27.2
PACKAGE_TARNAME = gnome-games
PACKAGE_VERSION = 2.27.2
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
POFILES = 
POSUB = po
PO_IN_DATADIR_FALSE = 
PO_IN_DATADIR_TRUE = 
PYGTK_CFLAGS = -I/usr/include/pygtk-2.0 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include  
PYGTK_LIBS = -lgobject-2.0 -lglib-2.0  
PYTHON = /usr/bin/python
PYTHON_EXEC_PREFIX = ${exec_prefix}
PYTHON_PLATFORM = linux2
PYTHON_PREFIX = ${prefix}
PYTHON_VERSION = 2.6
Q = $(V:1=)
RANLIB = ranlib
RSVG_CFLAGS = -I/usr/include/librsvg-2 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/gtk-2.0 -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng12  
RSVG_LIBS = -lrsvg-2 -lgdk_pixbuf-2.0 -lgobject-2.0 -lgmodule-2.0 -lglib-2.0 -lcairo  
SDL_CFLAGS = 
SDL_CONFIG = 
SDL_LIBS = 
SDL_MIXER_CFLAGS = 
SDL_MIXER_LIBS = 
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/sh
SMCLIENT_CFLAGS = 
SMCLIENT_LIBS = 
STRIP = strip
USE_NLS = yes
V = @
VERSION = 2.27.2
WARN_CFLAGS = -Wall -Wmissing-prototypes -Wnested-externs -Wpointer-arith -Wno-sign-compare 
WARN_CXXFLAGS = -g -O2 -fsigned-char -Wall -Wno-unused -Wshadow -Woverloaded-virtual 
XGETTEXT = /usr/bin/xgettext
XML_CFLAGS = 
XML_LIBS = 
abs_builddir = /home/guillaume/Builds/gnome-games/blackjack/src
abs_srcdir = /home/guillaume/Builds/gnome-games/blackjack/src
abs_top_builddir = /home/guillaume/Builds/gnome-games
abs_top_srcdir = /home/guillaume/Builds/gnome-games
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
allgames = aisleriot blackjack gnometris gnect gnomine same-gnome mahjongg gtali gnotravex gnotski glines iagno glchess gnobots2 gnibbles gnome-sudoku
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
gamelist = gnibbles gnometris
ggz_config = /usr/bin
ggzdatadir = /usr/share/ggz
ggzdconfdir = 
ggzddatadir = 
ggzdexecmoddir = 
ggzdexecmodpath = 
ggzdmod_includes = 
ggzdmod_libraries = 
ggzexecmoddir = /usr/lib/ggz
ggzmod_includes = /usr/include
ggzmod_libraries = /usr/lib
ggzmoduleconfdir = /usr/etc
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /home/guillaume/Builds/gnome-games/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
libggz_includes = /usr/include
libggz_libraries = /usr/lib
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lt_ECHO = echo
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
packagesrcdir = /home/guillaume/Builds/gnome-games
pdfdir = ${docdir}
pkgpyexecdir = ${pyexecdir}/gnome-games
pkgpythondir = ${pythondir}/gnome-games
prefix = /usr
program_transform_name = s,x,x,
psdir = ${docdir}
pyexecdir = ${exec_prefix}/lib/python2.6/site-packages
pythondir = ${prefix}/lib/python2.6/site-packages
sbindir = ${exec_prefix}/sbin
scoredir = ${localstatedir}/games
scores_group = games
scores_user = games
setgid = true
sharedstatedir = ${prefix}/com
shavedir = /home/guillaume/Builds/gnome-games/
srcdir = .
staginggames = lightsoff
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..
NULL = 
blackjack_SOURCES = \
	blackjack.cpp	\
	blackjack.h	\
	card.cpp	\
	card.h		\
	chips.cpp	\
	chips.h		\
	dialog.cpp	\
	dialog.h	\
	draw.cpp	\
	draw.h		\
	events.cpp	\
	events.h	\
	game.cpp	\
	game.h		\
	hand.cpp	\
	hand.h		\
	menu.cpp	\
	menu.h		\
        player.cpp	\
	player.h	\
	press_data.cpp  \
	press_data.h    \
	slot.cpp	\
	slot.h		\
	splash.cpp	\
	splash.h	\
	strategy.cpp	\
	strategy.h	\
	$(NULL)

blackjack_CPPFLAGS = \
	-I$(top_srcdir) \
	$(AM_CPPFLAGS)

blackjack_CXXFLAGS = $(GTK_CFLAGS) $(XML_CFLAGS) $(AM_CXXFLAGS) \
	$(am__append_1) $(am__append_3) $(am__append_5)
blackjack_LDADD =  \
	$(top_builddir)/libgames-support/libgames-support.la \
	$(GTK_LIBS) $(XML_LIBS) -lz $(am__append_2) $(am__append_4) \
	$(am__append_6)
all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  blackjack/src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  blackjack/src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
blackjack$(EXEEXT): $(blackjack_OBJECTS) $(blackjack_DEPENDENCIES) 
	@rm -f blackjack$(EXEEXT)
	$(blackjack_LINK) $(blackjack_OBJECTS) $(blackjack_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/blackjack-blackjack.Po
include ./$(DEPDIR)/blackjack-card.Po
include ./$(DEPDIR)/blackjack-chips.Po
include ./$(DEPDIR)/blackjack-dialog.Po
include ./$(DEPDIR)/blackjack-draw.Po
include ./$(DEPDIR)/blackjack-events.Po
include ./$(DEPDIR)/blackjack-game.Po
include ./$(DEPDIR)/blackjack-hand.Po
include ./$(DEPDIR)/blackjack-menu.Po
include ./$(DEPDIR)/blackjack-player.Po
include ./$(DEPDIR)/blackjack-press_data.Po
include ./$(DEPDIR)/blackjack-slot.Po
include ./$(DEPDIR)/blackjack-splash.Po
include ./$(DEPDIR)/blackjack-strategy.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

blackjack-blackjack.o: blackjack.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-blackjack.o -MD -MP -MF $(DEPDIR)/blackjack-blackjack.Tpo -c -o blackjack-blackjack.o `test -f 'blackjack.cpp' || echo '$(srcdir)/'`blackjack.cpp
	mv -f $(DEPDIR)/blackjack-blackjack.Tpo $(DEPDIR)/blackjack-blackjack.Po
#	source='blackjack.cpp' object='blackjack-blackjack.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-blackjack.o `test -f 'blackjack.cpp' || echo '$(srcdir)/'`blackjack.cpp

blackjack-blackjack.obj: blackjack.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-blackjack.obj -MD -MP -MF $(DEPDIR)/blackjack-blackjack.Tpo -c -o blackjack-blackjack.obj `if test -f 'blackjack.cpp'; then $(CYGPATH_W) 'blackjack.cpp'; else $(CYGPATH_W) '$(srcdir)/blackjack.cpp'; fi`
	mv -f $(DEPDIR)/blackjack-blackjack.Tpo $(DEPDIR)/blackjack-blackjack.Po
#	source='blackjack.cpp' object='blackjack-blackjack.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-blackjack.obj `if test -f 'blackjack.cpp'; then $(CYGPATH_W) 'blackjack.cpp'; else $(CYGPATH_W) '$(srcdir)/blackjack.cpp'; fi`

blackjack-card.o: card.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-card.o -MD -MP -MF $(DEPDIR)/blackjack-card.Tpo -c -o blackjack-card.o `test -f 'card.cpp' || echo '$(srcdir)/'`card.cpp
	mv -f $(DEPDIR)/blackjack-card.Tpo $(DEPDIR)/blackjack-card.Po
#	source='card.cpp' object='blackjack-card.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-card.o `test -f 'card.cpp' || echo '$(srcdir)/'`card.cpp

blackjack-card.obj: card.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-card.obj -MD -MP -MF $(DEPDIR)/blackjack-card.Tpo -c -o blackjack-card.obj `if test -f 'card.cpp'; then $(CYGPATH_W) 'card.cpp'; else $(CYGPATH_W) '$(srcdir)/card.cpp'; fi`
	mv -f $(DEPDIR)/blackjack-card.Tpo $(DEPDIR)/blackjack-card.Po
#	source='card.cpp' object='blackjack-card.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-card.obj `if test -f 'card.cpp'; then $(CYGPATH_W) 'card.cpp'; else $(CYGPATH_W) '$(srcdir)/card.cpp'; fi`

blackjack-chips.o: chips.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-chips.o -MD -MP -MF $(DEPDIR)/blackjack-chips.Tpo -c -o blackjack-chips.o `test -f 'chips.cpp' || echo '$(srcdir)/'`chips.cpp
	mv -f $(DEPDIR)/blackjack-chips.Tpo $(DEPDIR)/blackjack-chips.Po
#	source='chips.cpp' object='blackjack-chips.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-chips.o `test -f 'chips.cpp' || echo '$(srcdir)/'`chips.cpp

blackjack-chips.obj: chips.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-chips.obj -MD -MP -MF $(DEPDIR)/blackjack-chips.Tpo -c -o blackjack-chips.obj `if test -f 'chips.cpp'; then $(CYGPATH_W) 'chips.cpp'; else $(CYGPATH_W) '$(srcdir)/chips.cpp'; fi`
	mv -f $(DEPDIR)/blackjack-chips.Tpo $(DEPDIR)/blackjack-chips.Po
#	source='chips.cpp' object='blackjack-chips.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-chips.obj `if test -f 'chips.cpp'; then $(CYGPATH_W) 'chips.cpp'; else $(CYGPATH_W) '$(srcdir)/chips.cpp'; fi`

blackjack-dialog.o: dialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-dialog.o -MD -MP -MF $(DEPDIR)/blackjack-dialog.Tpo -c -o blackjack-dialog.o `test -f 'dialog.cpp' || echo '$(srcdir)/'`dialog.cpp
	mv -f $(DEPDIR)/blackjack-dialog.Tpo $(DEPDIR)/blackjack-dialog.Po
#	source='dialog.cpp' object='blackjack-dialog.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-dialog.o `test -f 'dialog.cpp' || echo '$(srcdir)/'`dialog.cpp

blackjack-dialog.obj: dialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-dialog.obj -MD -MP -MF $(DEPDIR)/blackjack-dialog.Tpo -c -o blackjack-dialog.obj `if test -f 'dialog.cpp'; then $(CYGPATH_W) 'dialog.cpp'; else $(CYGPATH_W) '$(srcdir)/dialog.cpp'; fi`
	mv -f $(DEPDIR)/blackjack-dialog.Tpo $(DEPDIR)/blackjack-dialog.Po
#	source='dialog.cpp' object='blackjack-dialog.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-dialog.obj `if test -f 'dialog.cpp'; then $(CYGPATH_W) 'dialog.cpp'; else $(CYGPATH_W) '$(srcdir)/dialog.cpp'; fi`

blackjack-draw.o: draw.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-draw.o -MD -MP -MF $(DEPDIR)/blackjack-draw.Tpo -c -o blackjack-draw.o `test -f 'draw.cpp' || echo '$(srcdir)/'`draw.cpp
	mv -f $(DEPDIR)/blackjack-draw.Tpo $(DEPDIR)/blackjack-draw.Po
#	source='draw.cpp' object='blackjack-draw.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-draw.o `test -f 'draw.cpp' || echo '$(srcdir)/'`draw.cpp

blackjack-draw.obj: draw.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-draw.obj -MD -MP -MF $(DEPDIR)/blackjack-draw.Tpo -c -o blackjack-draw.obj `if test -f 'draw.cpp'; then $(CYGPATH_W) 'draw.cpp'; else $(CYGPATH_W) '$(srcdir)/draw.cpp'; fi`
	mv -f $(DEPDIR)/blackjack-draw.Tpo $(DEPDIR)/blackjack-draw.Po
#	source='draw.cpp' object='blackjack-draw.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-draw.obj `if test -f 'draw.cpp'; then $(CYGPATH_W) 'draw.cpp'; else $(CYGPATH_W) '$(srcdir)/draw.cpp'; fi`

blackjack-events.o: events.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-events.o -MD -MP -MF $(DEPDIR)/blackjack-events.Tpo -c -o blackjack-events.o `test -f 'events.cpp' || echo '$(srcdir)/'`events.cpp
	mv -f $(DEPDIR)/blackjack-events.Tpo $(DEPDIR)/blackjack-events.Po
#	source='events.cpp' object='blackjack-events.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-events.o `test -f 'events.cpp' || echo '$(srcdir)/'`events.cpp

blackjack-events.obj: events.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-events.obj -MD -MP -MF $(DEPDIR)/blackjack-events.Tpo -c -o blackjack-events.obj `if test -f 'events.cpp'; then $(CYGPATH_W) 'events.cpp'; else $(CYGPATH_W) '$(srcdir)/events.cpp'; fi`
	mv -f $(DEPDIR)/blackjack-events.Tpo $(DEPDIR)/blackjack-events.Po
#	source='events.cpp' object='blackjack-events.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-events.obj `if test -f 'events.cpp'; then $(CYGPATH_W) 'events.cpp'; else $(CYGPATH_W) '$(srcdir)/events.cpp'; fi`

blackjack-game.o: game.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-game.o -MD -MP -MF $(DEPDIR)/blackjack-game.Tpo -c -o blackjack-game.o `test -f 'game.cpp' || echo '$(srcdir)/'`game.cpp
	mv -f $(DEPDIR)/blackjack-game.Tpo $(DEPDIR)/blackjack-game.Po
#	source='game.cpp' object='blackjack-game.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-game.o `test -f 'game.cpp' || echo '$(srcdir)/'`game.cpp

blackjack-game.obj: game.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-game.obj -MD -MP -MF $(DEPDIR)/blackjack-game.Tpo -c -o blackjack-game.obj `if test -f 'game.cpp'; then $(CYGPATH_W) 'game.cpp'; else $(CYGPATH_W) '$(srcdir)/game.cpp'; fi`
	mv -f $(DEPDIR)/blackjack-game.Tpo $(DEPDIR)/blackjack-game.Po
#	source='game.cpp' object='blackjack-game.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-game.obj `if test -f 'game.cpp'; then $(CYGPATH_W) 'game.cpp'; else $(CYGPATH_W) '$(srcdir)/game.cpp'; fi`

blackjack-hand.o: hand.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-hand.o -MD -MP -MF $(DEPDIR)/blackjack-hand.Tpo -c -o blackjack-hand.o `test -f 'hand.cpp' || echo '$(srcdir)/'`hand.cpp
	mv -f $(DEPDIR)/blackjack-hand.Tpo $(DEPDIR)/blackjack-hand.Po
#	source='hand.cpp' object='blackjack-hand.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-hand.o `test -f 'hand.cpp' || echo '$(srcdir)/'`hand.cpp

blackjack-hand.obj: hand.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-hand.obj -MD -MP -MF $(DEPDIR)/blackjack-hand.Tpo -c -o blackjack-hand.obj `if test -f 'hand.cpp'; then $(CYGPATH_W) 'hand.cpp'; else $(CYGPATH_W) '$(srcdir)/hand.cpp'; fi`
	mv -f $(DEPDIR)/blackjack-hand.Tpo $(DEPDIR)/blackjack-hand.Po
#	source='hand.cpp' object='blackjack-hand.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-hand.obj `if test -f 'hand.cpp'; then $(CYGPATH_W) 'hand.cpp'; else $(CYGPATH_W) '$(srcdir)/hand.cpp'; fi`

blackjack-menu.o: menu.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-menu.o -MD -MP -MF $(DEPDIR)/blackjack-menu.Tpo -c -o blackjack-menu.o `test -f 'menu.cpp' || echo '$(srcdir)/'`menu.cpp
	mv -f $(DEPDIR)/blackjack-menu.Tpo $(DEPDIR)/blackjack-menu.Po
#	source='menu.cpp' object='blackjack-menu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-menu.o `test -f 'menu.cpp' || echo '$(srcdir)/'`menu.cpp

blackjack-menu.obj: menu.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-menu.obj -MD -MP -MF $(DEPDIR)/blackjack-menu.Tpo -c -o blackjack-menu.obj `if test -f 'menu.cpp'; then $(CYGPATH_W) 'menu.cpp'; else $(CYGPATH_W) '$(srcdir)/menu.cpp'; fi`
	mv -f $(DEPDIR)/blackjack-menu.Tpo $(DEPDIR)/blackjack-menu.Po
#	source='menu.cpp' object='blackjack-menu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-menu.obj `if test -f 'menu.cpp'; then $(CYGPATH_W) 'menu.cpp'; else $(CYGPATH_W) '$(srcdir)/menu.cpp'; fi`

blackjack-player.o: player.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-player.o -MD -MP -MF $(DEPDIR)/blackjack-player.Tpo -c -o blackjack-player.o `test -f 'player.cpp' || echo '$(srcdir)/'`player.cpp
	mv -f $(DEPDIR)/blackjack-player.Tpo $(DEPDIR)/blackjack-player.Po
#	source='player.cpp' object='blackjack-player.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-player.o `test -f 'player.cpp' || echo '$(srcdir)/'`player.cpp

blackjack-player.obj: player.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-player.obj -MD -MP -MF $(DEPDIR)/blackjack-player.Tpo -c -o blackjack-player.obj `if test -f 'player.cpp'; then $(CYGPATH_W) 'player.cpp'; else $(CYGPATH_W) '$(srcdir)/player.cpp'; fi`
	mv -f $(DEPDIR)/blackjack-player.Tpo $(DEPDIR)/blackjack-player.Po
#	source='player.cpp' object='blackjack-player.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-player.obj `if test -f 'player.cpp'; then $(CYGPATH_W) 'player.cpp'; else $(CYGPATH_W) '$(srcdir)/player.cpp'; fi`

blackjack-press_data.o: press_data.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-press_data.o -MD -MP -MF $(DEPDIR)/blackjack-press_data.Tpo -c -o blackjack-press_data.o `test -f 'press_data.cpp' || echo '$(srcdir)/'`press_data.cpp
	mv -f $(DEPDIR)/blackjack-press_data.Tpo $(DEPDIR)/blackjack-press_data.Po
#	source='press_data.cpp' object='blackjack-press_data.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-press_data.o `test -f 'press_data.cpp' || echo '$(srcdir)/'`press_data.cpp

blackjack-press_data.obj: press_data.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-press_data.obj -MD -MP -MF $(DEPDIR)/blackjack-press_data.Tpo -c -o blackjack-press_data.obj `if test -f 'press_data.cpp'; then $(CYGPATH_W) 'press_data.cpp'; else $(CYGPATH_W) '$(srcdir)/press_data.cpp'; fi`
	mv -f $(DEPDIR)/blackjack-press_data.Tpo $(DEPDIR)/blackjack-press_data.Po
#	source='press_data.cpp' object='blackjack-press_data.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-press_data.obj `if test -f 'press_data.cpp'; then $(CYGPATH_W) 'press_data.cpp'; else $(CYGPATH_W) '$(srcdir)/press_data.cpp'; fi`

blackjack-slot.o: slot.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-slot.o -MD -MP -MF $(DEPDIR)/blackjack-slot.Tpo -c -o blackjack-slot.o `test -f 'slot.cpp' || echo '$(srcdir)/'`slot.cpp
	mv -f $(DEPDIR)/blackjack-slot.Tpo $(DEPDIR)/blackjack-slot.Po
#	source='slot.cpp' object='blackjack-slot.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-slot.o `test -f 'slot.cpp' || echo '$(srcdir)/'`slot.cpp

blackjack-slot.obj: slot.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-slot.obj -MD -MP -MF $(DEPDIR)/blackjack-slot.Tpo -c -o blackjack-slot.obj `if test -f 'slot.cpp'; then $(CYGPATH_W) 'slot.cpp'; else $(CYGPATH_W) '$(srcdir)/slot.cpp'; fi`
	mv -f $(DEPDIR)/blackjack-slot.Tpo $(DEPDIR)/blackjack-slot.Po
#	source='slot.cpp' object='blackjack-slot.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-slot.obj `if test -f 'slot.cpp'; then $(CYGPATH_W) 'slot.cpp'; else $(CYGPATH_W) '$(srcdir)/slot.cpp'; fi`

blackjack-splash.o: splash.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-splash.o -MD -MP -MF $(DEPDIR)/blackjack-splash.Tpo -c -o blackjack-splash.o `test -f 'splash.cpp' || echo '$(srcdir)/'`splash.cpp
	mv -f $(DEPDIR)/blackjack-splash.Tpo $(DEPDIR)/blackjack-splash.Po
#	source='splash.cpp' object='blackjack-splash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-splash.o `test -f 'splash.cpp' || echo '$(srcdir)/'`splash.cpp

blackjack-splash.obj: splash.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-splash.obj -MD -MP -MF $(DEPDIR)/blackjack-splash.Tpo -c -o blackjack-splash.obj `if test -f 'splash.cpp'; then $(CYGPATH_W) 'splash.cpp'; else $(CYGPATH_W) '$(srcdir)/splash.cpp'; fi`
	mv -f $(DEPDIR)/blackjack-splash.Tpo $(DEPDIR)/blackjack-splash.Po
#	source='splash.cpp' object='blackjack-splash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-splash.obj `if test -f 'splash.cpp'; then $(CYGPATH_W) 'splash.cpp'; else $(CYGPATH_W) '$(srcdir)/splash.cpp'; fi`

blackjack-strategy.o: strategy.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-strategy.o -MD -MP -MF $(DEPDIR)/blackjack-strategy.Tpo -c -o blackjack-strategy.o `test -f 'strategy.cpp' || echo '$(srcdir)/'`strategy.cpp
	mv -f $(DEPDIR)/blackjack-strategy.Tpo $(DEPDIR)/blackjack-strategy.Po
#	source='strategy.cpp' object='blackjack-strategy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-strategy.o `test -f 'strategy.cpp' || echo '$(srcdir)/'`strategy.cpp

blackjack-strategy.obj: strategy.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -MT blackjack-strategy.obj -MD -MP -MF $(DEPDIR)/blackjack-strategy.Tpo -c -o blackjack-strategy.obj `if test -f 'strategy.cpp'; then $(CYGPATH_W) 'strategy.cpp'; else $(CYGPATH_W) '$(srcdir)/strategy.cpp'; fi`
	mv -f $(DEPDIR)/blackjack-strategy.Tpo $(DEPDIR)/blackjack-strategy.Po
#	source='strategy.cpp' object='blackjack-strategy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(blackjack_CPPFLAGS) $(CPPFLAGS) $(blackjack_CXXFLAGS) $(CXXFLAGS) -c -o blackjack-strategy.obj `if test -f 'strategy.cpp'; then $(CYGPATH_W) 'strategy.cpp'; else $(CYGPATH_W) '$(srcdir)/strategy.cpp'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-libtool ctags distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am \
	uninstall-binPROGRAMS

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
