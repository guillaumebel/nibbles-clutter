/* connectx_client.h
 *
 * Four-in-a-row for GNOME
 * Copyright (C) 2006 -  Andreas RÃ¸sdal <andrearo@pvv.ntnu.no>
 *
 * This game is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
 * USA
 */


/* Generated by GGZComm/ruby version 0.4 */
/* Protocol 'connectx', version '2' */

#ifndef GGZCOMM_CONNECTX_H
#define GGZCOMM_CONNECTX_H

#define sndoptions 2
#define sndmove 0
#define reqsync 1
#define msgseat 0
#define msgplayers 1
#define reqmove 4
#define rspmove 5
#define msgmove 2
#define sndsync 6
#define msggameover 3
#define reqoptions 8
#define msgoptions 7

struct variables_t {
  char boardheight2;
  char boardwidth2;
  char connectlength2;
  int column3;
  int num;
  int seat[2];
  char *name[2];
  char status;
  int column;
  int column2;
  char boardheight3;
  char boardwidth3;
  char connectlength3;
  char turn;
  char winner;
  char minboardwidth;
  char maxboardwidth;
  char minboardheight;
  char maxboardheight;
  char minconnectlength;
  char maxconnectlength;
  char boardwidth;
  char boardheight;
  char connectlength;
};
struct variables_t variables;

void ggzcomm_network_main (void);

void ggzcomm_sndoptions (void);
void ggzcomm_sndmove (void);
void ggzcomm_reqsync (void);

typedef void (*notifier_func_type) (int opcode);
typedef void (*error_func_type) (void);

void ggzcomm_set_fd (int usefd);
int ggzcomm_get_fd (void);
void ggzcomm_set_notifier_callback (notifier_func_type f);
void ggzcomm_set_error_callback (error_func_type f);

#endif
